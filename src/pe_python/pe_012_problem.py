#! /usr/bin/env python
# _*_ coding: UTF-8 _*_
# File          :  12-problem.py
# Created       :  Wed 15 Apr 2015 23:09:55
# Last Modified :  Sun 19 Apr 2015 15:05:37
# Maintainer    :  sharlatan, <sharlatanus@gmail.com>
# Title         :  HIGHLY DIVISIBLE TRIANGULAR NUMBER
# License       :  Same as Python (GPL)
# Credits       :  https://projecteuler.net
#
#  -=:[ Description ]:=-
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#          1: 1
#          3: 1,3
#          6: 1,2,3,6
#          10: 1,2,5,10
#          15: 1,3,5,15
#          21: 1,3,7,21
#          28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over
# five hundred divisors?

from math import sqrt
import time


INIT_TIME = time.time()


def perf():
    """ return perfomance time of the programm """

    return ("Perfomance time: %s" % (time.time() - INIT_TIME))


def higly_divisible(num):
    """ takes list of numbers, return wanted quantity of divisors """

    give_div_back = []
    give_div_back.append(1)
    give_div_back.append(num)
    for i in xrange(2, int(sqrt(num))):
        if num % i == 0:
            give_div_back.append(i)
            give_div_back.append(num//i)
    give_div_back.sort()
    return give_div_back


def main():

    count = 7
    num = count * (count + 1)/2
    while len(higly_divisible(num)) < 500:
        count += 1
        num = count * (count + 1)/2
    print num
    print perf()


if __name__ == '__main__':
    main()

# -=:[ REFERANCE ]:=-
# * read about prime numbers
#   use prime number table

# -=:[ LINKED PROBLEMS ]:=-
# 7-problem.py
