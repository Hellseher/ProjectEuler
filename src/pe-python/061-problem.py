#! /usr/bin/env python
# _*_ coding: UTF-8 _*_
# File          :  61-problem.py
# Created       :  Sat 30 May 2015 23:07:02
# Last Modified :  Sat 29 Aug 2015 23:18:01
# Maintainer    :  sharlatan, <sharlatanus@gmail.com>
# Title         :  CYCLICAL FIGURATE NUMBERS
# License       :  Same as Python (GPL)
# Credits       :  https://projecteuler.net/problem=61
#
# -=:[ Description ]:=-
#
#
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
# are all figurate (polygonal) numbers and are generated by the following
# formulae:
#     Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
#     Square      P4,n=n2         1, 4, 9, 16, 25, ...
#     Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
#     Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
#     Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
#     Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
# interesting properties.
#
# The set is cyclic, in that the last two digits of each number is the
# first two digits of the next number (including the last number with the
#                 first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
# and pentagonal (P5,44=2882), is represented by a different number
# in the set.
#     This is the only set of 4-digit numbers with this property.
#
#  Find the sum of the only ordered set of six cyclic 4-digit
#  numbers for which each polygonal type: triangle, square,
#  pentagonal, hexagonal, heptagonal, and octagonal, is
#  represented by a different number in the set.
# <END  OF  DESCRIPTION>-------------------------------------------------------


from termcolor import colored
import time
# import sys

import ProjectEuler as pe


INIT_TIME = time.time()


def perf():
    # show the performance time
    millis = float(time.time() - INIT_TIME)
    print("Performance time: %s" % millis)


def error():
    # massage if not supported entering

    print colored("..::Incorrect amount of arguments::..", 'red')
    print colored("\tEnter just one integer", 'blue')
    quit()


def main():
    # let's begin
    print list(pe.trgn(127, "one"))
    print list(pe.sqrn(127, "one"))
    print list(pe.pntn(127, "one"))
    print list(pe.hexn(127, "one"))
    print list(pe.hepn(127, "one"))
    print list(pe.octn(127, "one"))
    perf()


if __name__ == '__main__':
    main()
